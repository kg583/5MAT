%import common.WS
%ignore WS

// BASIC TERMINALS
CONSTANT: /-?\d+/
POSITIVE_INT: /[1-9]\d*/
%import python.NAME
SYM_NAME.-1: NAME
comment: /\/\/[^\n]*/
// we could %ignore comments but I want comments I make in the 7MAT to appear in the 6MAT

!_comp_op: "<" | ">" | "==" | ">=" | "<=" | "!="
!_shift_op: "<<" | ">>"
!_add_op: "+" | "-"
!_mul_op: "*" | "/" | "%"
!_unary_op: "-"

// EXPRESSIONS
?expr: shift_expr
?shift_expr: arith_expr (_shift_op POSITIVE_INT)?
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _unary_op? atom_expr

comma_list: expr ("," expr)*
?atom_expr: SYM_NAME "(" [comma_list] ")" -> func_call
          | SYM_NAME "[" expr "]"         -> arr_access
          | SYM_NAME "." atom_expr        -> attr_access
          | atom

?atom: "(" expr ")"
     | "TRUE"   -> const_true
     | "FALSE"  -> const_false
     | SYM_NAME -> var_ref
     | CONSTANT

// TESTS (conditional expressions)
test: or_test
?or_test: and_test ("||" and_test)*
?and_test: comparison ("&&" comparison)*
?comparison: expr [_comp_op expr]

// TYPES
type: /Str(_\d{1,3})?/                      -> type_str
    | /Int(3[0-6]|[12]\d|[2-9])(_\d{1,3})?/ -> type_int
    | "struct" SYM_NAME                     -> type_struct
    | type "[" POSITIVE_INT? "]"                  -> type_arr

// STATEMENTS
if: "if" "(" test ")" "{" code_block "}" ["else" "{" code_block "}"]
while: "while" "(" test ")" "{" code_block "}"
return: "return" expr? ";"
print: "print" expr ";"

var_decl: type SYM_NAME ";"
lhs: SYM_NAME              -> var_assign
   | SYM_NAME "[" expr "]" -> arr_assign
   | SYM_NAME ("." lhs)+   -> ind_assign

assignment: lhs "=" expr ";"

func_call: SYM_NAME "(" comma_list? ")" ";"

// CODE HIERARCHY
start: _global_def*
_global_def: struct_def
           | fn_def

members_list: var_decl+
struct_def: "struct" SYM_NAME "{" members_list "}" ";"?

args_list: type SYM_NAME ("," type SYM_NAME)*
fn_def: "func" SYM_NAME "(" args_list? ")" ["->" type] "{" code_block "}"

code_block: statement+
?statement: if
          | while
          | var_decl
          | assignment
          | func_call
          | return
          | print
          | comment
